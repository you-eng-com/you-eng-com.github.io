{"version":3,"sources":["components/YouTubePlayerStore.tsx","env.ts","components/YouTubePlayer.tsx","components/StudyStepsControler.tsx","components/TextWord.tsx","helper.ts","components/EventView.tsx","components/Timedtext.tsx","components/PlayerControler.tsx","components/SpeechMatcher.tsx","components/CueForm.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["StudySteps","PlayerStatuses","video_id","a","console","log","url","env","btoa","fetch","resp","body","qsToJson","text","json","player_response","captions","playerCaptionsTracklistRenderer","captionTracks","baseUrl","timedtext","events","filter","e","segs","length","utf8","sort","b","tStartMs","undefined","qs","kv","k","v","res","pars","split","i","decodeURIComponent","JSON","parse","YouTubePlayer","inject","observer","componentDidMount","window","YT","initPlayer","tag","document","createElement","src","onYouTubeIframeAPIReady","firstScriptTag","getElementsByTagName","parentNode","insertBefore","addEventListener","getMessageFromYT","props","YouTubePlayerStore","SetPlayer","Player","videoId","VideoId","playerVars","autoplay","onReady","onStateChange","onError","event","t0","performance","now","data","error","info","playerState","PlayerStatus","SetPlayerStatus","currentTimeLastUpdated_","dtime","Date","warn","currentTime","SetCurrentTime","Unstarted","dalayExitFullscreen","setTimeout","fullscreenElement","Playing","exitFullscreen","Ended","Paused","this","loadVideoById","TextField","label","variant","onChange","SetVideoId","target","value","style","width","margin","className","id","removeEventListener","React","StudyStepsControler","p","toStep1","SetStudyStep","UnderstandTheContext","toStep2","WithSubtitles","Stepper","activeStep","StudyStep","orientation","Step","key","StepLabel","StepContent","Typography","Button","onClick","PlayFullscreen","color","ButtonGroup","aria-label","disabled","TextWord","state","highlight","onMouseOver","setState","onMouseOut","word","splitWord","s","сompare","s1","s2","replace","trim","toLowerCase","EventView","map","seg","sIndex","wIndex","PureComponent","Timedtext","TimedTextData","VideoData","title","author","CaptionTracks","Select","native","CurrentCaptionTrack","SetCurrentCaptionTrack","c","name","simpleText","paragraph","eIndex","ShowCaptionTillEvent","PlayerControler","PlayPrevCue","PlayCue","PlayNextCue","Pause","SpeechRecognition","webkitSpeechRecognition","SpeechGrammarList","webkitSpeechGrammarList","recognition","recognizing","isSendStart","SpeechMatcher","finalText","interimText","componentWillUnmount","abort","onstart","onerror","onend","onresult","results","resultIndex","isFinal","transcript","clearText","onNext","onShow","onRepeat","onResult","debug","lang","maxAlternatives","continuous","interimResults","onaudiostart","onaudioend","onnomatch","onsoundstart","onsoundend","onspeechstart","onspeechend","grammar","speechRecognitionList","addFromString","grammars","ItsStartOnPause","playerStatus","start","Component","CueForm","showSubtitles","Card","CardContent","gutterBottom","component","href","rel","CardActions","join","App","CssBaseline","Grid","container","item","xs","position","Boolean","location","hostname","match","stores","CurrentTimeMs","NotReady","СurrentCaptionTrackEventIndex","playFromMyButtom","SetTimedTextData","tt","SetСurrentCaptionTrackEventIndex","findIndex","videoIdOrURL","tryParse","youtubeUrlParser","history","pushState","getCaptionTracks","then","currentCaptionTrack","languageCode","kind","find","getTimedtext","catch","currentTimeMs","calcСurrentCaptionTrackEventIndex","findTimedTextDataEventIndex","setPauseVideoTimer","result","currentCaptionTrackEventIndex","oldСurrent","getElementById","classList","remove","newСurrent","add","scrollIntoView","behavior","block","inline","prepareCueForm","cueForm","player","studyStep","getVideoData","newVideoData","playVideo","getIframe","requestFullscreen","deltaMs","timer","eCurrent","eNext","clearTimeout","start2Start","timeForPauseMs","dDurationMs","Object","assign","seekTo","pauseVideo","makeAutoObservable","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1a6d1946.chunk.js","sourcesContent":["import { makeAutoObservable } from \"mobx\"\nimport env from '../env'\nimport { Event } from '../helper'\n\nexport interface TimedTextData {\n    events: Event[];\n    //...\n}\n\nexport interface CaptionTrack {\n    baseUrl: string,\n    isTranslatable: boolean,\n    kind: string,  // asr = Automatic Speech Recognition\n    languageCode: string,\n    name: { simpleText: string },\n    vssId: string,\n}\n\nexport enum StudySteps {\n    UnderstandTheContext = 0,\n    WithSubtitles,\n    StudyWords,\n    Repeat,\n}\n\nexport enum PlayerStatuses {\n    NotReady = -2,\n    Unstarted = -1,\n    Ended = 0,\n    Playing = 1,\n    Paused = 2,\n    Buffering = 3,\n    VideoCued = 5,\n}\n\nexport interface VideoData {\n    author: string,\n    title: string,\n    //video_id\n    //video_quality\n}\n\nexport class YouTubePlayerStore {\n    //TODO read VideoId on page load\n    VideoId: string = \"CZ3wIuvmHeM\";\n    TimedTextData: TimedTextData = { events: [] };\n    CurrentTimeMs: number = -1;\n    Player: any;\n    StudyStep: StudySteps = StudySteps.UnderstandTheContext;\n    PlayerStatus: PlayerStatuses = PlayerStatuses.NotReady;\n    CaptionTracks: CaptionTrack[] = [];\n    CurrentCaptionTrack: CaptionTrack | undefined = undefined;\n    VideoData: VideoData = { author: \"\", title: \"\" };\n    СurrentCaptionTrackEventIndex: number = -1;\n    playFromMyButtom: boolean = false;\n    ShowCaptionTillEvent: number = -1;\n\n    constructor() {\n        makeAutoObservable(this)\n        this.SetVideoId(\"CZ3wIuvmHeM\")\n    }\n\n    SetTimedTextData = (tt: TimedTextData | undefined) => {\n        console.log(\"call setTimedTextData\", tt)\n        this.TimedTextData = tt || { events: [] };\n        this.SetСurrentCaptionTrackEventIndex(\n            this.TimedTextData.events.findIndex(e => this.CurrentTimeMs >= e.tStartMs))\n    }\n\n    SetVideoId = (videoIdOrURL: string) => {\n        if (videoIdOrURL.length === 11)\n            this.VideoId = videoIdOrURL\n        else {\n            const tryParse = youtubeUrlParser(videoIdOrURL)\n            if (tryParse)\n                this.VideoId = tryParse\n        }\n\n        //TODO set Title?\n        //TODO read VideoId on page load\n        window.history.pushState(null, \"Title\", \"?v=\" + this.VideoId);\n\n        this.PlayerStatus = -1;\n        this.SetCurrentTime(-1);\n\n        getCaptionTracks(this.VideoId).then((captionTracks: CaptionTrack[]) => {\n            this.CaptionTracks = captionTracks;\n            let currentCaptionTrack = undefined\n\n            console.log(\"captionTracks=\", captionTracks)\n            if (captionTracks === undefined || captionTracks.length === 0) {\n                this.SetCurrentCaptionTrack(undefined)\n                return\n            }\n\n            currentCaptionTrack = captionTracks[0]\n            for (let i = 1; i < captionTracks.length; i++) {\n                if (captionTracks[i].languageCode === \"en\"\n                    && currentCaptionTrack.kind === \"asr\")\n                    currentCaptionTrack = captionTracks[i];\n            }\n            this.SetCurrentCaptionTrack(currentCaptionTrack.baseUrl)\n        });\n    }\n\n    SetCurrentCaptionTrack = (baseUrl: string | undefined) => {\n        if (baseUrl === undefined) {\n            this.SetTimedTextData(undefined)\n            return\n        }\n\n        this.CurrentCaptionTrack = this.CaptionTracks.find(c => c.baseUrl === baseUrl)\n\n        getTimedtext(baseUrl)\n            .then(tt => this.SetTimedTextData(tt))\n            .catch(() => { console.log(\"getTimedtext error\") })\n    }\n\n    SetCurrentTime = (currentTimeMs: number) => {\n        this.CurrentTimeMs = currentTimeMs;\n\n        if (\n            (this.СurrentCaptionTrackEventIndex === -1)\n            || (this.StudyStep !== StudySteps.WithSubtitles)\n        ) {\n            let calcСurrentCaptionTrackEventIndex = this.findTimedTextDataEventIndex(currentTimeMs)\n            this.SetСurrentCaptionTrackEventIndex(calcСurrentCaptionTrackEventIndex)\n        }\n        if (this.StudyStep === StudySteps.WithSubtitles)\n            this.setPauseVideoTimer()\n    }\n\n    findTimedTextDataEventIndex = (currentTimeMs: number): number => {\n        const t0 = performance.now();\n        if (currentTimeMs === -1)\n            return -1\n        let result = this.TimedTextData.events.findIndex(e => currentTimeMs <= e.tStartMs) - 1\n        console.log(\"findTimedTextDataEventIndex\", result, `${performance.now() - t0} ms`)\n        return result\n    }\n\n    SetСurrentCaptionTrackEventIndex = (currentCaptionTrackEventIndex: number) => {\n        // https://www.youtube.com/watch?v=CZ3wIuvmHeM\n        // хочу посмотреть https://www.youtube.com/watch?v=Eg3mi79INO8&feature=emb_logo\n        if (this.СurrentCaptionTrackEventIndex !== currentCaptionTrackEventIndex) {\n            let oldСurrent = document.getElementById(\"e\" + this.СurrentCaptionTrackEventIndex)\n            if (oldСurrent)\n                oldСurrent.classList.remove(\"currentCue\")\n\n            let newСurrent = document.getElementById(\"e\" + currentCaptionTrackEventIndex)\n            if (newСurrent) {\n                newСurrent.classList.add(\"currentCue\")\n                newСurrent.scrollIntoView({ behavior: \"smooth\", block: \"nearest\", inline: \"nearest\" });\n            }\n\n            this.СurrentCaptionTrackEventIndex = currentCaptionTrackEventIndex\n            console.log(\"СurrentCaptionTrackEventIndex=\", currentCaptionTrackEventIndex)\n\n            this.prepareCueForm()\n        }\n    }\n\n    prepareCueForm = () => {\n        if (this.StudyStep === StudySteps.WithSubtitles) {\n            this.ShowCaptionTillEvent = this.СurrentCaptionTrackEventIndex\n            setTimeout(() => {\n                //after render\n                let cueForm = document.getElementById(\"cue-form\")\n                if (cueForm) {\n                    cueForm.scrollIntoView({ behavior: \"smooth\", block: \"nearest\", inline: \"nearest\" });\n                }\n            }, 1);\n        } else\n            this.ShowCaptionTillEvent = -1\n    }\n\n    SetPlayer = (player: any) => {\n        console.log(\"player\", player)\n        this.Player = player;\n    }\n\n    SetStudyStep = (studyStep: StudySteps) => {\n        console.log(\"studyStep\", studyStep)\n        this.StudyStep = studyStep;\n\n        this.prepareCueForm()\n    }\n\n    SetPlayerStatus = (playerStatus: PlayerStatuses) => {\n        console.log(\"playerStatus\", playerStatus);\n        this.PlayerStatus = playerStatus;\n        if (!this.Player.getVideoData)\n            return;\n\n        //update VideoData without extra rendering\n        let newVideoData = this.Player.getVideoData();\n        if (newVideoData) {\n            if (this.VideoData.author !== newVideoData.author)\n                this.VideoData.author = newVideoData.author;\n            if (this.VideoData.title !== newVideoData.title)\n                this.VideoData.title = newVideoData.title;\n        }\n\n        if (\n            (playerStatus === PlayerStatuses.Playing)\n            && (!this.playFromMyButtom)\n            && (this.StudyStep === StudySteps.WithSubtitles)\n        ) {\n            let calcСurrentCaptionTrackEventIndex = this.findTimedTextDataEventIndex(this.CurrentTimeMs)\n            this.SetСurrentCaptionTrackEventIndex(calcСurrentCaptionTrackEventIndex)\n        }\n    }\n\n    PlayFullscreen = () => {\n        if (this.Player && this.Player.loadVideoById)\n            this.Player.playVideo()\n        this.Player.getIframe().requestFullscreen()\n    }\n\n    PlayPrevCue = () => {\n        this.SetСurrentCaptionTrackEventIndex(this.СurrentCaptionTrackEventIndex - 1)\n        this.PlayCue()\n    }\n    PlayNextCue = () => {\n        this.SetСurrentCaptionTrackEventIndex(this.СurrentCaptionTrackEventIndex + 1)\n        this.PlayCue()\n    }\n\n    deltaMs = 100;\n    timer: any = -1;\n    setPauseVideoTimer = () => {\n        let eCurrent = this.TimedTextData.events[this.СurrentCaptionTrackEventIndex];\n        let eNext = this.TimedTextData.events[this.СurrentCaptionTrackEventIndex + 1];\n        clearTimeout(this.timer)\n        if (eCurrent) {\n            let start2Start = eNext.tStartMs - eCurrent.tStartMs\n            let timeForPauseMs = eCurrent.tStartMs\n                + (eNext && eCurrent.dDurationMs > start2Start\n                    ? start2Start\n                    : eCurrent.dDurationMs)\n                + this.deltaMs;\n\n            console.log(\"setPauseVideoTimer\",\n                \"eCurrent\", Object.assign({}, eCurrent),\n                \"timeForPauseMs\", timeForPauseMs,\n                \"eNext\", Object.assign({}, eNext),\n                \"start2Start\", start2Start,\n                \"pause after\", timeForPauseMs - this.CurrentTimeMs\n            )\n\n            if (timeForPauseMs > this.CurrentTimeMs)\n                this.timer = setTimeout(this.Pause, timeForPauseMs - this.CurrentTimeMs);\n            else\n                this.Pause()\n        }\n    }\n\n    PlayCue = () => {\n        if (this.СurrentCaptionTrackEventIndex < 0\n            || this.СurrentCaptionTrackEventIndex >= this.TimedTextData.events.length)\n            this.SetСurrentCaptionTrackEventIndex(0);\n        if (this.TimedTextData.events.length === 0)\n            console.log(\"Ошибка: Субтитры не скачаны\");\n        else {\n            if (this.Player && this.Player.loadVideoById) {\n                let e = this.TimedTextData.events[this.СurrentCaptionTrackEventIndex];\n                this.SetCurrentTime(e.tStartMs - this.deltaMs);\n                this.Player.seekTo((e.tStartMs - this.deltaMs) / 1000, true)\n                this.playFromMyButtom = true;\n                //do play, after the react do render, because render may take long time\n                setTimeout(() => {\n                    this.Player.playVideo();\n                    this.setPauseVideoTimer();\n                }, 1);\n            }\n        }\n    }\n    Pause = () => {\n        if (this.Player && this.Player.pauseVideo) {\n            console.log(\"pauseVideo\", this.CurrentTimeMs)\n\n            this.Player.pauseVideo();\n            this.timer = -1;\n            this.playFromMyButtom = false;\n        }\n    }\n}\n\n//https://stackoverflow.com/questions/3452546/how-do-i-get-the-youtube-video-id-from-a-url\nfunction youtubeUrlParser(url: string): string | undefined {\n    var regExp = /.*(?:youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=)([^#&?]*).*/;\n    var match = url.match(regExp);\n    return (match && match[1].length === 11) ? match[1] : undefined;\n}\n\nasync function getCaptionTracks(video_id: string): Promise<CaptionTrack[]> {\n    console.log(\"getTimedtextLink \" + video_id)\n    const url = env.be + '?u=' + btoa('https://www.youtube.com/get_video_info?eurl=http%3A%2F%2Flocalhost%3A3000%2F&hl=en_US&video_id=' + video_id)\n    const resp = await fetch(url)\n\n    if ((resp != null) && (resp.body != null)) {\n        const json = qsToJson(await resp.text())\n\n        if ((json != null)\n            && (json.player_response != null)\n            && (json.player_response.captions != null)\n            && (json.player_response.captions.playerCaptionsTracklistRenderer != null)\n            && (json.player_response.captions.playerCaptionsTracklistRenderer.captionTracks != null)) {\n            return json.player_response.captions.playerCaptionsTracklistRenderer.captionTracks;\n        } else {\n            console.log(\"captionTracks not found json=\", json)\n        }\n    }\n    return [];\n}\n\nasync function getTimedtext(baseUrl: string): Promise<TimedTextData | undefined> {\n    const url = env.be + '?u=' + btoa(baseUrl + \"&fmt=json3\")\n    const resp = await fetch(url)\n\n    if ((resp != null) && (resp.body != null)) {\n        const timedtext = await resp.json() as TimedTextData;\n        console.log(\"Timedtext=\", timedtext);\n\n        timedtext.events = timedtext.events\n            .filter(e => {\n                return e.segs && e.segs.length > 0 &&\n                    !(e.segs.length === 1 && e.segs[0].utf8 === \"\\n\")\n            })\n            .sort((a, b) => a.tStartMs - b.tStartMs);\n        return timedtext;\n    }\n    return undefined;\n}\n\nfunction qsToJson(qs: string): any {\n    let res: any = {};\n    let pars = qs.split('&');\n    let kv, k, v;\n    for (let i in pars) {\n        kv = pars[i].split('=');\n        k = kv[0];\n        v = kv[1];\n        res[k] = decodeURIComponent(v);\n        if (k === \"player_response\") {\n            res[k] = JSON.parse(res[k])\n        }\n    }\n    return res;\n}","const be = \"https://you-eng.ew.r.appspot.com/\"\nexport default { be }","import * as React from \"react\";\nimport { observer, inject } from \"mobx-react\"\nimport { YouTubePlayerStore, PlayerStatuses } from './YouTubePlayerStore';\nimport { TextField } from \"@material-ui/core\";\n\ndeclare global {\n    interface Window {\n        YT: any;\n        onYouTubeIframeAPIReady: any;\n    }\n}\n\ninterface IProps {\n    YouTubePlayerStore?: YouTubePlayerStore;\n}\n\n@inject(\"YouTubePlayerStore\")\n@observer\nexport default class YouTubePlayer extends React.PureComponent<IProps> {\n    render() {\n        console.log(\"render\", this.props.YouTubePlayerStore!.VideoId)\n\n        if (this.props.YouTubePlayerStore!.Player && this.props.YouTubePlayerStore!.Player.loadVideoById)\n            this.props.YouTubePlayerStore!.Player.loadVideoById(this.props.YouTubePlayerStore!.VideoId)\n        return <>\n            <TextField\n                label=\"Enter youtube URL or VideoID\"\n                variant=\"filled\"\n                onChange={(e: any) => { this.props.YouTubePlayerStore!.SetVideoId(e.target.value) }}\n                style={{ width: \"100%\" }}\n                margin={'dense'}\n            />\n\n            <div className=\"videoWrapper\">\n                <div id={`player`} />\n            </div>\n        </>\n    }\n\n    componentDidMount = () => {\n        if (!window.YT) { // If not, load the script asynchronously\n            const tag = document.createElement('script');\n            tag.src = 'https://www.youtube.com/iframe_api';\n\n            window.onYouTubeIframeAPIReady = this.initPlayer;\n\n            const firstScriptTag = document.getElementsByTagName('script')[0];\n            firstScriptTag.parentNode!.insertBefore(tag, firstScriptTag);\n        } else { // If script is already there, load the video directly\n            this.initPlayer();\n        }\n        window.addEventListener(\"message\", this.getMessageFromYT);\n    };\n\n    initPlayer = () => {\n        this.props.YouTubePlayerStore!.SetPlayer(\n            new window.YT.Player(`player`, {\n                videoId: this.props.YouTubePlayerStore!.VideoId,\n                playerVars: {\n                    autoplay: 1,\n                },\n                events: {\n                    onReady: this.onReady,\n                    onStateChange: this.onStateChange,\n                    onError: this.onError,\n                },\n            })\n        );\n    };\n\n    componentWillUnmount() {\n        window.removeEventListener(\"message\", this.getMessageFromYT);\n    }\n\n    getMessageFromYT = (event: any) => {\n        const t0 = performance.now();\n        //TODO check, that is from YT\n        let data: any = undefined;\n        try {\n            data = JSON.parse(event.data);\n        } catch (error) {\n            //console.error(\"YT message error\", error, event)\n            return\n        }\n        console.log(\"YT message\", data.event, data.info)\n\n        if (data.info) {\n            if ((data.info.playerState !== undefined)\n                && (\n                    this.props.YouTubePlayerStore!.PlayerStatus !== data.info.playerState)) {\n                this.props.YouTubePlayerStore!.SetPlayerStatus(data.info.playerState)\n\n            }\n            let dtime = 0;\n            if (data.info.currentTimeLastUpdated_) {\n                let dtime = Date.now() - 1000 * data.info.currentTimeLastUpdated_\n                if (dtime > 100)\n                    console.warn(\"dtime=\", dtime);\n            }\n            if (data.info.currentTime) {\n                this.props.YouTubePlayerStore!.SetCurrentTime(data.info.currentTime * 1000 + dtime)\n            }\n        }\n\n        const t1 = performance.now();\n        if ((t1 - t0) > 2)\n            console.warn(\"<< YT message\", `${performance.now() - t0} ms`)\n    }\n\n    onReady = () => {\n        this.props.YouTubePlayerStore!.SetPlayerStatus(PlayerStatuses.Unstarted)\n    };\n\n    dalayExitFullscreen = () => {\n        // if playing restore (example: for video seek), then not exit from fullscreen\n        setTimeout(() => {\n            if (document.fullscreenElement &&\n                this.props.YouTubePlayerStore!.PlayerStatus !== PlayerStatuses.Playing)\n                document.exitFullscreen()\n        }, 1000);\n    }\n\n    onStateChange = (event: any) => {\n        this.props.YouTubePlayerStore!.SetPlayerStatus(event.data)\n\n        if (event.data === PlayerStatuses.Ended || event.data === PlayerStatuses.Paused)\n            this.dalayExitFullscreen()\n    }\n\n    onError = (e: any) => {\n        console.log(\"onError\", e.data)\n    }\n}","import * as React from \"react\";\nimport { observer, inject } from \"mobx-react\"\n\nimport { Stepper, Step, StepLabel, StepContent } from '@material-ui/core';\nimport Typography from '@material-ui/core/Typography';\nimport { ButtonGroup, Button } from '@material-ui/core';\nimport { YouTubePlayerStore, StudySteps } from './YouTubePlayerStore';\n\ninterface IProps {\n    YouTubePlayerStore?: YouTubePlayerStore;\n}\n\n@inject(\"YouTubePlayerStore\")\n@observer\nexport default class StudyStepsControler extends React.PureComponent<IProps> {\n    p: YouTubePlayerStore;\n    constructor(props: IProps) {\n        super(props)\n        this.p = props.YouTubePlayerStore!;\n    }\n\n    toStep1 = () => {\n        this.p.SetStudyStep(StudySteps.UnderstandTheContext)\n    }\n    toStep2 = () => {\n        this.p.SetStudyStep(StudySteps.WithSubtitles)\n    }\n\n    render() {\n        return <div>\n            <Stepper activeStep={this.p.StudyStep} orientation=\"vertical\">\n                <Step key=\"s1\">\n                    <StepLabel>Посмотреть полностью, без субтитров</StepLabel>\n                    <StepContent>\n                        <Typography>Посмотрите видео полностью, без субтитров. Не важно, какой процент информации Вы поймёте, старайтесь понять контекст.</Typography>\n                        <Button\n                            onClick={this.p.PlayFullscreen}\n                            variant=\"contained\" color=\"primary\">Смотреть</Button>\n\n                        <br /><br />\n                        <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\n                            <Button\n                                disabled={true}\n                                variant=\"contained\">Back</Button>\n                            <Button\n                                onClick={this.toStep2}\n                                variant=\"contained\">Next</Button>\n                        </ButtonGroup>\n                    </StepContent>\n                </Step >\n                <Step key=\"s2\">\n                    <StepLabel>Посмотреть пофразно, с субтитрами</StepLabel>\n                    <StepContent>\n                        <Typography>Плеер проигрывает одну фразу, попытайся понять её на слух. Повтори фразу за героем. Проверь себя, посмотрев субтитры.</Typography>\n\n                        <br /><br />\n                        <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\n                            <Button\n                                onClick={this.toStep1}\n                                variant=\"contained\">Back</Button>\n                            <Button\n                                disabled={true}\n                                variant=\"contained\">Next</Button>\n                        </ButtonGroup>\n                    </StepContent>\n                </Step >\n            </Stepper>\n        </div>;\n    }\n}","import * as React from \"react\";\n\ninterface IProps {\n    word: string\n}\n\ninterface IState {\n    highlight: boolean\n}\n\nexport default class TextWord extends React.PureComponent<IProps, IState>\n{\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            highlight: false\n        };\n    }\n\n    render() {\n        let className = 'word' + (this.state.highlight ? ' highlight' : '');\n        return <span className={className}\n            onMouseOver={() => { this.setState({ highlight: true }) }}\n            onMouseOut={() => { this.setState({ highlight: false }) }}\n        >\n            {this.props.word}\n        </span>;\n    }\n}\n","import { parseSync, NodeCue } from \"subtitle\"\n\nfunction removeTags(s: string) {\n    return s.replace(/(<([^>]+)>)/gi, \"\");\n}\n\nfunction splitLine(s: string) {\n    return s.replace(/\\r\\n/g, \"\\r\").replace(/\\n/g, \"\\r\").split(/\\r/);\n}\n\nexport function splitWord(s: string) {  //TODO do private?\n    //return s.split(/(\\s+)/).filter(e => e.trim().length > 0)\n    //return s.split(/(\\s|\\?|\\.)+/).filter(e => e.length > 0)\n    //return s.split(/([\\W\\d^\\']+|[^\\W\\d\\']+)/).filter(e => e.length > 0)\n    //return s.split(/([\\W\\d]+|[^\\W\\d]+(?:'[st])/).filter(e => e.length > 0)\n    //return s.split(/([\\W\\d]+|[^\\W\\d]+(?:'[st]|[(?:re)(?:ve)])?)/).filter(e => e.length > 0)\n    return s.split(/([\\W\\d]+|[^\\W\\d]+(?:'[t]))/).filter(e => e.length > 0)\n}\n\nexport declare type Line = string[];\n\nexport interface Frame {\n    start: number;\n    end: number;\n    text: Line[];\n}\n\nexport declare type Frames = Frame[];\n\nexport function Srt2Frames(srt: string) {\n    let result: Frames = [];\n    parseSync(srt).forEach(node => {\n        if (node.type === \"cue\") {\n            const cueData = (node as NodeCue).data;\n\n            let f: Frame = {\n                start: cueData.start,\n                end: cueData.end,\n                text: [],\n            }\n\n            splitLine(removeTags(cueData.text)).forEach(line => {\n                f.text.push(splitWord(line))\n            });\n\n            result.push(f);\n        }\n    });\n    return result\n}\n\nexport interface Seg {\n    tOffsetMs: number,\n    acAsrConf: number,\n    utf8: string,\n    //...\n}\n\nexport interface Event {\n    tStartMs: number,\n    dDurationMs: number,\n    segs: Seg[];\n    //...\n}\n\nexport function Event2String(e?: Event): string {\n    if (!e)\n        return '';\n    return e.segs.map(seg => seg.utf8).join(\" \")\n}\n\nexport function сompare(s1?: String, s2?: String): boolean {\n    return ((!s1 && !s2)\n        || ((s1 !== undefined && s2 !== undefined)\n            && (s1.replace(/ +/g, \" \").trim().toLowerCase() === s2.replace(/ +/g, \" \").trim().toLowerCase())))\n}\n","import React from \"react\";\nimport TextWord from './TextWord'\nimport { Event, splitWord } from '../helper'\n\ninterface IEventViewProps {\n    e: Event;\n    id: string;\n}\n\nexport default class EventView extends React.PureComponent<IEventViewProps> {\n    render() {\n        if (this.props.e && this.props.e.segs)\n            return <span id={this.props.id}>\n                {' '}\n                {this.props.e.segs.map((seg, sIndex) => {\n                    return splitWord(seg.utf8).map((word, wIndex) => {\n                        return <TextWord word={word} key={this.props.id + 's' + sIndex + 'w' + wIndex} />\n                    })\n                })}\n            </span>;\n        else\n            return <></>;\n    }\n}","import React from \"react\";\nimport { Typography, Select } from '@material-ui/core';\nimport { observer, inject } from \"mobx-react\"\nimport { YouTubePlayerStore } from './YouTubePlayerStore';\nimport EventView from './EventView';\n\ninterface IProps {\n    YouTubePlayerStore?: YouTubePlayerStore;\n    className?: string\n}\n\n@inject(\"YouTubePlayerStore\")\n@observer\nexport default class Timedtext extends React.PureComponent<IProps> {\n    // TODO shouldComponentUpdate(nextProps: IProps): boolean {\n    //     this.props.YouTubePlayerStore!.VideoData.title\n    //     this.props.YouTubePlayerStore!.VideoData.author\n    //     this.props.YouTubePlayerStore!.CaptionTracks.ShowCaptionTillEvent\n    //     this.props.YouTubePlayerStore!.TimedTextData\n\n    //     return true;\n    // }\n\n    render() {\n        console.log(\"Timedtext render\")\n        const events = this.props.YouTubePlayerStore!.TimedTextData.events;\n        if (events.length === 0)\n            return <h1>{'<= Shoose video'}</h1>;\n        return <div className={this.props.className}>\n            <h1>\n                {this.props.YouTubePlayerStore!.VideoData.title}\n                {this.props.YouTubePlayerStore!.VideoData.author ? ' // ' : ''}\n                {this.props.YouTubePlayerStore!.VideoData.author}\n            </h1>\n            {this.props.YouTubePlayerStore!.CaptionTracks.length > 1\n                ? <h3>\n                    Subtitles:{' '}\n                    {\n                        this.props.YouTubePlayerStore!.CaptionTracks.length > 0 ?\n                            <Select native\n                                value={this.props.YouTubePlayerStore!.CurrentCaptionTrack\n                                    ? this.props.YouTubePlayerStore!.CurrentCaptionTrack.baseUrl\n                                    : undefined}\n                                onChange={e => this.props.YouTubePlayerStore!.SetCurrentCaptionTrack(e.target.value as string)}\n                            >\n                                {this.props.YouTubePlayerStore!.CaptionTracks.map(c => {\n                                    return <option key={c.baseUrl} value={c.baseUrl} >{c.name.simpleText}</option>\n                                })\n                                }\n                            </Select>\n                            : <></>\n                    }\n                </h3>\n                : ''\n            }\n            <Typography paragraph>\n                {events\n                    .filter((e, eIndex) =>\n                        (this.props.YouTubePlayerStore!.ShowCaptionTillEvent === -1)\n                        || (eIndex < this.props.YouTubePlayerStore!.ShowCaptionTillEvent)\n                    )\n                    .map((e, eIndex) =>\n                        <EventView\n                            key={'e' + eIndex}\n                            id={'e' + eIndex}\n                            e={e} />\n                    )\n                }\n            </Typography>\n        </div>;\n    }\n}","import * as React from \"react\";\nimport { observer, inject } from \"mobx-react\"\n\nimport { ButtonGroup, Button } from '@material-ui/core';\nimport { YouTubePlayerStore, PlayerStatuses } from './YouTubePlayerStore';\n\nimport SkipPreviousIcon from '@material-ui/icons/SkipPrevious';\nimport ReplayIcon from '@material-ui/icons/Replay';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport PauseIcon from '@material-ui/icons/Pause';\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\n\ninterface IProps {\n    YouTubePlayerStore?: YouTubePlayerStore;\n}\n\n@inject(\"YouTubePlayerStore\")\n@observer\nexport default class PlayerControler extends React.PureComponent<IProps> {\n    p: YouTubePlayerStore;\n    constructor(props: IProps) {\n        super(props)\n        this.p = props.YouTubePlayerStore!;\n    }\n\n    render() {\n        return <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\n            <Button onClick={this.p.PlayPrevCue}>\n                <SkipPreviousIcon /></Button>\n            <Button onClick={this.p.PlayCue}>\n                <ReplayIcon /></Button>\n            {this.p.PlayerStatus !== PlayerStatuses.Playing\n                ? <Button onClick={this.p.PlayNextCue}>\n                    <PlayArrowIcon /></Button>\n                : <Button onClick={this.p.Pause}>\n                    <PauseIcon /></Button>}\n            <Button onClick={this.p.PlayNextCue}>\n                <SkipNextIcon /></Button>\n        </ButtonGroup>;\n    }\n}","import React from \"react\";\nimport { Button } from '@material-ui/core';\nimport Mic from '@material-ui/icons/Mic';\nimport { PlayerStatuses } from './YouTubePlayerStore';\nimport { сompare } from '../helper'\n\ninterface IState {\n    text: string;\n    finalText: string;\n    interimText: string;\n    recognizing: boolean;\n}\n\ninterface IProps {\n    text: string;\n    playerStatus: PlayerStatuses;\n    onNext?: Function;\n    onShow?: Function;\n    onRepeat?: Function;\n    onResult?: Function;\n}\n\nlet SpeechRecognition = (window as any).SpeechRecognition || (window as any).webkitSpeechRecognition;\nlet SpeechGrammarList = (window as any).SpeechGrammarList || (window as any).webkitSpeechGrammarList;\n\nlet recognition = new SpeechRecognition();\nlet recognizing = false;\nlet isSendStart = false;\n\nexport default class SpeechMatcher extends React.Component<IProps, IState> {\n    state: IState = {\n        text: '',\n        finalText: '',\n        interimText: '',\n        recognizing: false,\n    }\n\n    constructor(p: IProps) {\n        super(p)\n\n        recognition.lang = 'en-US'; // TODO to settings\n        recognition.maxAlternatives = 1;\n        recognition.continuous = true;\n        recognition.interimResults = true;\n\n        recognition.onstart = this.onstart;\n        recognition.onresult = this.onresult;\n        recognition.onerror = this.onerror;\n        recognition.onend = this.onend;\n\n        recognition.onaudiostart = () => console.log(\"SpeechMatcher onaudiostart\")\n        recognition.onaudioend = () => console.log(\"SpeechMatcher onaudioend\")\n        recognition.onnomatch = () => console.log(\"SpeechMatcher onnomatch\")\n        recognition.onsoundstart = () => console.log(\"SpeechMatcher onsoundstart\")\n        recognition.onsoundend = () => console.log(\"SpeechMatcher onsoundend\")\n        recognition.onspeechstart = () => console.log(\"SpeechMatcher onspeechstart\")\n        recognition.onspeechend = () => console.log(\"SpeechMatcher onspeechend\")\n    }\n\n    componentWillUnmount = () => {\n        recognition.abort()\n    }\n\n    static getDerivedStateFromProps(props: IProps, state: IState) {\n        if (state.text !== props.text) {\n            console.log(\"SpeechMatcher recognition.abort();\")\n            recognition.abort();\n\n            var grammar = '#JSGF V1.0; grammar phrase; public <phrase> = ' + props.text + ';';\n            var speechRecognitionList = new SpeechGrammarList();\n            speechRecognitionList.addFromString(grammar, 1);\n            recognition.grammars = speechRecognitionList;\n\n            return {\n                text: props.text,\n                finalText: \"\",\n                interimText: \"\",\n                ItsStartOnPause: false,\n            }\n        }\n        if ((props.playerStatus === PlayerStatuses.Paused)\n            && (!recognizing && !isSendStart)) {\n            try {\n                console.log(\"SpeechMatcher recognition.start();\")\n                recognition.start();\n            } catch (error) {\n                console.error(\"SpeechMatcher\", error)\n            }\n            isSendStart = true;\n\n        }\n        return null;\n    }\n\n    onstart = () => {\n        console.log(\"SpeechMatcher onstart\")\n        recognizing = true;\n        isSendStart = false;\n        this.setState({\n            recognizing: true,\n        })\n    }\n    onerror = (event: any) => {\n        console.log(\"SpeechMatcher onerror\", event)\n        // recognizing = false;   if call \"run\" in this moment - then get error \"recorder alrady start\"\n        // isSendStart = false;\n        this.setState({\n            recognizing: false,\n        })\n    }\n    onend = () => {\n        console.log(\"SpeechMatcher onend\")\n        recognizing = false;\n        isSendStart = false;\n        this.setState({\n            recognizing: false,\n        })\n    }\n\n    onresult = (event: any) => {\n        console.log(\"SpeechMatcher \", event.results)\n\n        let finalText = '';\n        let interimText = '';\n\n        for (var i = event.resultIndex; i < event.results.length; ++i) {\n            if (event.results[i].isFinal) {\n                finalText += event.results[i][0].transcript;\n            } else {\n                interimText += event.results[i][0].transcript;\n            }\n        }\n\n        let clearText = false;\n\n        switch (interimText.trim().toLowerCase()) {\n            case 'next':\n                if (this.props.onNext) {\n                    clearText = true;\n                    this.props.onNext();\n                }\n                break;\n            case 'show':\n                if (this.props.onShow) {\n                    clearText = true;\n                    this.props.onShow();\n                }\n                break;\n            case 'repeat':\n                if (this.props.onRepeat) {\n                    clearText = true;\n                    this.props.onRepeat();\n                }\n                break;\n            default:\n        }\n\n        if (finalText !== '' && this.props.onResult) {\n            this.props.onResult();\n        }\n\n        if (сompare(interimText, this.state.text)\n            || сompare(finalText, this.state.text))\n            this.props.onNext && this.props.onNext();\n        else {\n            console.debug(\"SpeechMatcher check\", finalText, interimText, this.state.text)\n        }\n\n        let state = clearText\n            ? {\n                finalText: '',\n                interimText: '',\n            }\n            : {\n                finalText,\n                interimText,\n            }\n\n        this.setState(state)\n    }\n\n    render() {\n        return <>\n            <Button>\n                <Mic color={this.state.recognizing ? \"secondary\" : \"primary\"} />\n            </Button>\n            <span> {this.state.finalText} </span>\n            <span style={{ color: \"grey\" }}> {this.state.interimText} </span>\n        </>;\n    }\n}","import * as React from \"react\";\nimport { observer, inject } from \"mobx-react\"\nimport { YouTubePlayerStore, StudySteps } from './YouTubePlayerStore';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport { CardActions } from \"@material-ui/core\";\nimport { Button } from '@material-ui/core';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\n\nimport PlayerControler from './PlayerControler';\nimport SpeechMatcher from './SpeechMatcher';\nimport { Event2String } from '../helper';\n\ninterface IState {\n    text: string;\n    showSubtitles: boolean;\n}\n\ninterface IProps {\n    YouTubePlayerStore?: YouTubePlayerStore;\n}\n\n@inject(\"YouTubePlayerStore\")\n@observer\nexport default class CueForm extends React.PureComponent<IProps>\n{\n    state = {\n        text: '',\n        showSubtitles: false,\n    }\n\n    p: YouTubePlayerStore;//shot link\n\n    constructor(props: IProps) {\n        super(props)\n        this.p = props.YouTubePlayerStore!;\n    }\n\n    static getDerivedStateFromProps(props: IProps, state: IState) {\n        let text = Event2String(\n            props.YouTubePlayerStore!.TimedTextData.events[props.YouTubePlayerStore!.ShowCaptionTillEvent]\n        );\n        if (state.text !== text) {\n            return {\n                showSubtitles: false,\n                text,\n            }\n        }\n        return null;\n    }\n\n    onShow = () => {\n        this.setState({ showSubtitles: true })\n    }\n\n    render() {\n        if (\n            (this.p.StudyStep !== StudySteps.WithSubtitles)\n            || (this.p.TimedTextData.events.length === 0)\n            || (this.p.TimedTextData.events.length <= this.p.ShowCaptionTillEvent)\n        )\n            return <></>;\n\n        return <Card variant=\"outlined\" id=\"cue-form\">\n\n            <CardContent>\n                <Typography color=\"textSecondary\" gutterBottom>\n                    Текущая фраза\n                </Typography>\n                <Typography variant=\"h5\" component=\"h2\">\n\n                    <Button onClick={this.onShow}>\n                        <VisibilityIcon />\n                    </Button>\n                    {\n                        this.state.showSubtitles\n                            ? <span>{this.state.text}</span>\n                            : <span>произнесите, что сказал герой видео, скажите <i><b>show</b></i> или нажмите на глазик</span>\n                    }\n\n                </Typography>\n                <Typography color=\"textSecondary\" gutterBottom>\n                    Вы произнесли\n                </Typography>\n                <Typography variant=\"h5\" component=\"h2\">\n                    <SpeechMatcher\n                        text={this.state.text}\n                        playerStatus={this.p.PlayerStatus}\n                        onShow={this.onShow}\n                        onResult={this.onShow}\n                        onNext={this.p.PlayNextCue}\n                        onRepeat={this.p.PlayCue}\n                    />\n                </Typography>\n                <Typography color=\"textSecondary\">\n                    Позже, я добавлю перевод субтитров и список слов. А пока советую установить расшерение <a href=\"https://chrome.google.com/webstore/detail/google-translate/aapbdbdomjkkjkaonfhkkikfgjllcleb\" target=\"_blank\" rel=\"noopener noreferrer\">Google Translate</a>\n                </Typography>\n            </CardContent>\n            <CardActions>\n                <PlayerControler />\n            </CardActions>\n        </Card>\n    }\n}\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport { Grid } from \"@material-ui/core\";\nimport GitHubForkRibbon from 'react-github-fork-ribbon';\n\nimport YouTubePlayer from './components/YouTubePlayer';\nimport StudyStepsControler from './components/StudyStepsControler'\nimport Timedtext from './components/Timedtext';\nimport Cue from './components/CueForm';\n\nexport default function App() {\n  return (\n    <>\n      <CssBaseline />\n      {/* flex - https://codesandbox.io/s/z24wl3n58m */}\n      <Grid container className=\"flex-section\">\n        <Grid\n          item\n          xs={4}\n          className={\"flex-col-scroll\"}\n        >\n          <YouTubePlayer />\n          <StudyStepsControler />\n        </Grid>\n        <Grid\n          item\n          xs={8}\n          className={\"flex-col-scroll\"}\n        >\n          <Timedtext />\n          <Cue />\n        </Grid>\n      </Grid>\n\n      <GitHubForkRibbon href=\"//github.com/you-eng-com/you-eng-com\"\n        target=\"_blank\"\n        position=\"right\">\n        Fork me on GitHub\n      </GitHubForkRibbon>\n\n\n    </>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"mobx-react\";\nimport { YouTubePlayerStore } from './components/YouTubePlayerStore'\n\nconst stores = {\n  YouTubePlayerStore: new YouTubePlayerStore(),\n};\n\nReactDOM.render(\n  <Provider {...stores}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}